View(films)
View(ggfilms)
ggtornadoes + geom_point(aes(x=size,y=property_loss,col=fatalities)) + labs(title='Estimated Property Loss vs. Size of Tornado', x='Size of Tornado (miles * yards)',y='Estimated Property Loss ($)') + theme_bw() + theme(plot.title = element_text(size = 10))
ggtornadoes = ggplot(tornadoes)
ggtornadoes + geom_point(aes(x=size,y=property_loss,col=fatalities)) + labs(title='Estimated Property Loss vs. Size of Tornado', x='Size of Tornado (miles * yards)',y='Estimated Property Loss ($)') + theme_bw() + theme(plot.title = element_text(size = 10))
ggtornadoes + geom_point(aes(x=size,y=property_loss,col=fatalities)) + labs(title='Estimated Property Loss vs. Size of Tornado', x='Size of Tornado (miles * yards)',y='Estimated Property Loss ($)',color='Fatalities') + theme_bw() + theme(plot.title = element_text(size = 10))
ggtornadoes + geom_point(aes(x=size,y=property_loss,col=fatalities)) + labs(title='Estimated Property Loss vs. Size of Tornado', x='Size of Tornado (miles * yards)',y='Estimated Property Loss ($)',color='Fatalities') + theme_bw() + theme(plot.title = element_text(size = 12))
ggtornadoes + geom_point(aes(x=size,y=property_loss,col=fatalities)) + labs(title='Estimated Property Loss vs. Size of Tornado', x='Size of Tornado (miles * yards)',y='Estimated Property Loss ($)',color='Fatalities') + theme_bw() + theme(plot.title = element_text(size = 11))
ggtornadoes + geom_point(aes(x=size,y=property_loss), col = "maroon") + labs(title='Estimated Property Loss vs. Size of Tornado', x='Size of Tornado (miles * yards)',y='Estimated Property Loss ($)') + theme_bw() + theme(plot.title = element_text(size = 10))
cor(noFatalities$property_loss, noFatalities$length_miles)
cor(yesFatalities$property_loss, yesFatalities$length_miles)
noFatalities$size = noFatalities$length_miles * noFatalities$width_yards
yesFatalities$size = yesFatalities$length_miles * yesFatalities$width_yards
cor(yesFatalities$property_loss, yesFatalities$size)
cor(noFatalities$property_loss, noFatalities$size)
knitr::opts_chunk$set(fig.height=3, fig.width=4, warning=FALSE, tidy.opts=list(width.cutoff=60))
library(tidyverse)
library(ggplot2)
series = read.csv("Homework3_tvSeries.csv")
tbseries = tibble(series)
tbseries = filter(tbseries, EndYear > 1)
tbseries$YearsRan = tbseries$EndYear - tbseries$StartYear
ggseries = ggplot(tbseries)
ggseries + geom_histogram(aes(x=YearsRan), col='black', fill='maroon') + labs(title='Distribution of Runtime of TV Shows', x='Length of Run Time (years)',y='Frequency') + theme_bw()
length(which(tbseries$YearsRan == 0))
ratings = read.csv("Homework3_ratings.csv")
View(series)
1 - (length(ratings$tconst) / length(series$tconst))
ratingsSeries = full_join(series, ratings, by = "tconst")
View(ratingsSeries)
ratingsSeries = inner_join(series, ratings, by = "tconst")
1 - (length(ratingsSeries$tconst) / length(series$tconst))
ratingsSeries[which(ratingsSeries$avgRating > 9 && ratingsSeries$numvotes > 20000, 3)
ratingsSeries[which(ratingsSeries$avgRating > 9 && ratingsSeries$numvotes > 20000, 3)]
ratingsSeries[which(ratingsSeries$avgRating > 9 && ratingsSeries$numvotes > 20000, 3)]
ratingsSeries[which((ratingsSeries$avgRating > 9 && ratingsSeries$numvotes > 20000), 3)]
ratingsSeries[which((ratingsSeries$avgRating > 9 && ratingsSeries$numvotes > 20000), 3)]
ratingsSeries[which((ratingsSeries$avgRating > 9 && ratingsSeries$numvotes > 20000), 3)]
ratingsSeries[which(ratingsSeries$avgRating > 9 & ratingsSeries$numvotes > 20000), 3]
sort(ratingsSeries[which(ratingsSeries$avgRating > 9 & ratingsSeries$numvotes > 20000), 3])
principals = read.csv("Homework3_principals.csv")
View(principals)
principalsSeries = inner_join(series, principals, by = "tconst")
View(principalsSeries)
principalsSeries = mutate(principalsSeries, age = DeathYear - BirthYear)
principalsSeries$DeathYear == na = 2024
principalsSeries$DeathYear[is.na(principalsSeries)] = 2024
principalsSeries$DeathYear[is.na(principalsSeries),] = 2024
principalsSeries$DeathYear[is.na(principalsSeries$DeathYear)] = 2024
principalsSeries = mutate(principalsSeries, age = DeathYear - BirthYear)
knitr::opts_chunk$set(fig.height=3, fig.width=4, warning=FALSE, tidy.opts=list(width.cutoff=60))
library(tidyverse)
library(ggplot2)
ratings = read.csv("Homework3_ratings.csv")
ratingsSeries = inner_join(series, ratings, by = "tconst")
ratings = read.csv("Homework3_ratings.csv")
ratingsSeries = inner_join(series, ratings, by = "tconst")
knitr::opts_chunk$set(fig.height=3, fig.width=4, warning=FALSE, tidy.opts=list(width.cutoff=60))
library(tidyverse)
library(ggplot2)
series = read.csv("Homework3_tvSeries.csv")
tbseries = tibble(series)
tbseries = filter(tbseries, EndYear > 1)
tbseries$YearsRan = tbseries$EndYear - tbseries$StartYear
ggseries = ggplot(tbseries)
ggseries + geom_histogram(aes(x=YearsRan), col='black', fill='maroon') + labs(title='Distribution of Runtime of TV Shows', x='Length of Run Time (years)',y='Frequency') + theme_bw()
length(which(tbseries$YearsRan == 0))
ratings = read.csv("Homework3_ratings.csv")
ratingsSeries = inner_join(series, ratings, by = "tconst")
round(1 - (length(ratingsSeries$tconst) / length(series$tconst)), 2)
sort(ratingsSeries[which(ratingsSeries$avgRating > 9 & ratingsSeries$numvotes > 20000), 3])
principals = read.csv("Homework3_principals.csv")
principalsSeries = inner_join(series, principals, by = "tconst")
principalsSeries$DeathYear[is.na(principalsSeries$DeathYear)] = 2024
principalsSeries = mutate(principalsSeries, age = DeathYear - BirthYear)
is_tibble(principalsSeries)
length(which(tbseries$YearsRan == 0))
principals = read.csv("Homework3_principals.csv")
principalsSeries = inner_join(series, principals, by = "tconst")
principalsSeries = mutate(principalsSeries, age = StartYear - BirthYear)
?avg
?avergae
?mean
?arrange
select(principalsSeries, Category)
prop.table(select(principalsSeries, Category))
principalsByOcc = group_by(principalsSeries, Category)
summarize(principalsByOcc, meanwidth = mean(principalsSeries.age))
summarize(principalsByOcc, meanwidth = mean(age))
?mean
summarize(principalsByOcc, meanwidth = mean(age, na.rm = TRUE))
summarize(principalsByOcc, Mean = mean(age, na.rm = TRUE))
summarize(principalsByOcc, Mean = round(mean(age, na.rm = TRUE)), 2)
summarize(principalsByOcc, Mean = round(mean(age, na.rm = TRUE), 2))
`r (round(1 - (length(ratingsSeries$tconst) / length(series$tconst)), 2)` of the TV series don't have rating information. The above table represents the TV series with a rating of at least 9 and at least 20,000 votes in alphabetical order.
(round(1 - (length(ratingsSeries$tconst) / length(series$tconst)), 2))
options(scipen = 999)
knitr::opts_chunk$set(fig.height=3, fig.width=4, warning=FALSE, tidy.opts=list(width.cutoff=60))
tornadoes = read.csv("Project1_Tornados.csv")
View(tornadoes)
options(scipen = 999)
knitr::opts_chunk$set(fig.height=3, fig.width=4, warning=FALSE, tidy.opts=list(width.cutoff=60))
library(ggplot2)
tornadoes = read.csv("Project1_Tornados.csv")
ggtornadoes = ggplot(tornadoes)
tornadoes$property_loss[is.na(tornadoes$property_loss)] = 0
ggtornadoes + geom_histogram(aes(x=property_loss), binwidth = 1000, col='black', fill='maroon') + labs(title='Distribution of Estimated Property Loss', x='Estimated Property Loss ($)',y='Frequency') + theme_bw()
View(tornadoes)
View(tornadoes)
View(tornadoes)
View(tornadoes)
View(tornadoes)
tornadoes$size = tornadoes$length_miles * tornadoes$width_yards
ggtornadoes = ggplot(tornadoes)
ggtornadoes + geom_point(aes(x=size,y=property_loss), col = "maroon") + labs(title='Estimated Property Loss vs. Size of Tornado', x='Size of Tornado (miles * yards)',y='Estimated Property Loss ($)') + theme_bw() + theme(plot.title = element_text(size = 10))
ggtornadoes + geom_point(aes(x=magnitude,y=property_loss), col = "maroon") + labs(title='Estimated Property Loss vs. Magnitude', x='Magnitude (EF Scale)',y='Estimated Property Loss ($)') + theme_bw() + theme(plot.title = element_text(size = 12))
options(scipen = 1)
ggtornadoes + geom_histogram(aes(x=property_loss), binwidth = 1000,col='black',fill='maroon')  + labs(title='Estimated Property Loss for Tornadoes with and without Fatalities',x='Estimated Property Loss ($)',y='Frequency') + theme(legend.position='bottom') + facet_wrap(~fatalities) + theme_bw() + theme(axis.text.x = element_text(size = 4))
View(tornadoes)
options(scipen = 999)
noFatalities = tornadoes[tornadoes$fatalities == "no",]
yesFatalities = tornadoes[tornadoes$fatalities == "yes",]
ggtornadoes + geom_point(aes(x=size,y=property_loss,col=fatalities)) + labs(title='Estimated Property Loss vs. Size of Tornado', x='Size of Tornado (miles * yards)',y='Estimated Property Loss ($)',color='Fatalities') + theme_bw() + theme(plot.title = element_text(size = 11))
noFatalities$size = noFatalities$length_miles * noFatalities$width_yards
yesFatalities$size = yesFatalities$length_miles * yesFatalities$width_yards
View(tornadoes)
View(tornadoes)
knitr::opts_chunk$set(fig.height=3, fig.width=4, warning=FALSE, tidy.opts=list(width.cutoff=60))
library(tidyverse)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
taylor_kelce = read.csv("taylor_kelce.csv")
taylor_kelce$Date = as.Date(taylor_kelce$Date, format = "%m/%d/%y")
year(taylor_kelce[8,"Date"]) = 2023
year(taylor_kelce[17,"Date"]) = 2024
year(taylor_kelce[18,"Date"]) = 2024
taylor_kelce[12,"Date"] = as.Date("2023-12-03", format = "%Y-%m-%d")
taylor_sunday = sum(wday(taylor_kelce$Date) == 1 & taylor_kelce$WasTaylorSwiftatthegame == "Yes") / length(which(wday(taylor_kelce$Date) == 1))
taylor_monday = sum(wday(taylor_kelce$Date) == 2 & taylor_kelce$WasTaylorSwiftatthegame == "Yes") / length(which(wday(taylor_kelce$Date) == 2))
taylor_thursday = sum(wday(taylor_kelce$Date) == 5 & taylor_kelce$WasTaylorSwiftatthegame == "Yes") / length(which(wday(taylor_kelce$Date) == 5))
taylor_saturday = sum(wday(taylor_kelce$Date) == 7 & taylor_kelce$WasTaylorSwiftatthegame == "Yes") / length(which(wday(taylor_kelce$Date) == 7))
q2table = tibble(Day = c("Sunday", "Monday", "Thursday", "Saturday"), Number_of_Games = c(length(which(wday(taylor_kelce$Date) == 1)), length(which(wday(taylor_kelce$Date) == 2)), length(which(wday(taylor_kelce$Date) == 5)), length(which(wday(taylor_kelce$Date) == 7))), Proportion_Taylor_attended = c(taylor_sunday, taylor_monday, taylor_thursday, taylor_saturday))
q2table
concussions = read.csv("concussions_nfl.csv")
concussions$Date = parse_date_time(concussions$Date, orders = c("mdy", "dmy"))
concussions = filter(concussions, 2011 < year(concussions$Date) & year(concussions$Date) < 2015)
concussions_expand = pivot_wider(concussions, names_from = Information, values_from = Value)
head(concussions_expand, 10)
concussions_expand$Month = month(concussions_expand$Date, label=TRUE)
ggconcussions = ggplot(concussions_expand)
ggconcussions + geom_bar(aes(x=Month), col='black', fill='maroon') + labs(title='Distribution of NFL Concussions Per Month', x='Month',y='Number of Concussions') + theme_bw()
ggconcussions + geom_bar(aes(x=Position), col='black', fill='maroon') + labs(title='Distribution of NFL Concussions By Position', x='Position',y='Number of Concussions') + theme_bw() + theme(axis.text.x = element_text(size = 4))
food = read.csv("Homework4_food.csv")
children_food = select(food, County, Population, State, LowAccessNumbers_Children_1Mile, LowAccessNumbers_Children_0.5Mile, LowAccessNumbers_Children_10Miles, LowAccessNumbers_Children_20Miles)
reshaped_food = pivot_longer(children_food, cols = starts_with("LowAccessNumbers_"), names_to = "distance", names_prefix = "Distance_", values_to = "pop_count")
reshaped_food = reshaped_food[order(reshaped_food$County), ]
head(reshaped_food, 10)
mean_pop_count = aggregate(pop_count ~ distance, data = reshaped_food, FUN = mean)
mean_pop_count = mean_pop_count[order(mean_pop_count$pop_count), ]
mean_pop_count
View(taylor_kelce)
reticulate::repl_python()
wd
wd()
/wd
options(scipen = 999)
knitr::opts_chunk$set(fig.height=3, fig.width=4, warning=FALSE, tidy.opts=list(width.cutoff=60))
library(ggplot2)
tornadoes = read.csv("Project1_Tornados.csv")
ggtornadoes = ggplot(tornadoes)
# Makes all NA property loss values 0
tornadoes$property_loss[is.na(tornadoes$property_loss)] = 0
# Creates a historgram displaying distribution of estimated property loss
ggtornadoes + geom_histogram(aes(x=property_loss), binwidth = 1000, col='black', fill='maroon') + labs(title='Distribution of Estimated Property Loss', x='Estimated Property Loss ($)',y='Frequency') + theme_bw()
![The 500 Greatest Albums of All Time. (2022, July 1). rollingstone.com. https://www.rollingstone.com/music/music-lists/100-best-debut-albums-of-all-time-143608/](image2.png)
![The 500 Greatest Albums of All Time. (2022, July 1). rollingstone.com. https://www.rollingstone.com/music/music-lists/100-best-debut-albums-of-all-time-143608/](image2.png)
![The 500 Greatest Albums of All Time. (2022, July 1). rollingstone.com. https://www.rollingstone.com/music/music-lists/100-best-debut-albums-of-all-time-143608/](image2.png)
![The 500 Greatest Albums of All Time. (2022, July 1). rollingstone.com. https://www.rollingstone.com/music/music-lists/100-best-debut-albums-of-all-time-143608/](image2.png)
![T](image2.png)
![](image2.png)
![](image2.png)
wd()
getwd()
knitr::opts_chunk$set(fig.height=3, fig.width=4, warning=FALSE, tidy.opts=list(width.cutoff=60))
library(tidyverse)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(readr)
library(stringr)
library(viridis)
gym = read.csv("gym_members_exercise_tracking.csv")
View(gym)
gym = read.csv("gym_members_exercise_tracking.csv")
gym = rename(gym, Weight = Weight..kg.)
gym = rename(gym, Weight = Weight..kg., Height = Height..m., Session_Duration..hours., Water_Intake = Water_Intake..liters., Workout_Frequency = Workout_Frequency..days.week.)
gym = rename(gym, Height = Height..m., Session_Duration..hours., Water_Intake = Water_Intake..liters., Workout_Frequency = Workout_Frequency..days.week.)
gym = rename(gym, Height = Height..m., Session_Duration = Session_Duration..hours., Water_Intake = Water_Intake..liters., Workout_Frequency = Workout_Frequency..days.week.)
gym = read.csv("gym_members_exercise_tracking.csv")
gym = rename(gym, Weight = Weight..kg., Height = Height..m., Session_Duration = Session_Duration..hours., Water_Intake = Water_Intake..liters., Workout_Frequency = Workout_Frequency..days.week.)
gym$Calories_Per_Hour = gym$Calories_Burned / gym$Session_Duration
gym$Intensity_Level = NA
for (i in 1:nrow(gym)) {
if (gym [i] > 140) {
dataset$Intensity_Level[i] = "High"
} else if (gym$Avg_BPM > 100) {
gym$Intensity_Level[i] = "Moderate"
} else {
gym$Intensity_Level[i] = "Low"
}
}
gym = read.csv("gym_members_exercise_tracking.csv")
gym = rename(gym, Weight = Weight..kg., Height = Height..m., Session_Duration = Session_Duration..hours., Water_Intake = Water_Intake..liters., Workout_Frequency = Workout_Frequency..days.week.)
gym$Calories_Per_Hour = gym$Calories_Burned / gym$Session_Duration
gym$Intensity_Level = NA
for (i in 1:nrow(gym)) {
if (gym$Avg_BPM[i] > 140) {
dataset$Intensity_Level[i] = "High"
} else if (gym$Avg_BPM[i] > 100) {
gym$Intensity_Level[i] = "Moderate"
} else {
gym$Intensity_Level[i] = "Low"
}
}
gym = read.csv("gym_members_exercise_tracking.csv")
gym = rename(gym, Weight = Weight..kg., Height = Height..m., Session_Duration = Session_Duration..hours., Water_Intake = Water_Intake..liters., Workout_Frequency = Workout_Frequency..days.week.)
gym$Calories_Per_Hour = gym$Calories_Burned / gym$Session_Duration
gym$Intensity_Level = NA
for (i in 1:nrow(gym)) {
if (gym$Avg_BPM[i] > 140) {
gym$Intensity_Level[i] = "High"
} else if (gym$Avg_BPM[i] > 100) {
gym$Intensity_Level[i] = "Moderate"
} else {
gym$Intensity_Level[i] = "Low"
}
}
cleaned_gym = select(gym)
View(cleaned_gym)
cleaned_gym = select(gym, -Experience_level)
cleaned_gym = select(gym, -Experience_Level)
gymgg = ggplot(cleaned_gym)
# calories burned
gymgg + geom_histogram(aes(x=Calories_Per_Hour), col='black', fill='maroon') + labs(title='Distribution of Calories Burned Per Hour', x='Calories Per Hour',y='Frequency') + theme_bw()
func_histogram(Calories_Per_Hour, "Calories Burned Per Hour")
func_histogram = function(variable, full_variable) {
gymgg + geom_histogram(aes(x=variable), col='black', fill='maroon') + labs(title=paste('Distribution of', full_variable), x=full_variable, y='Frequency') + theme_bw()
}
func_histogram(Calories_Per_Hour, "Calories Burned Per Hour")
gymgg + geom_histogram(aes(x=variable), col='black', fill='maroon') + labs(title=paste('Distribution of', full_variable), x=full_variable, y='Frequency') + theme_bw()
func_histogram("Calories_Per_Hour", "Calories Burned Per Hour")
gymgg = ggplot(cleaned_gym)
# calories per hour
# workout type
# session duration
# bmi
func_histogram = function(variable, full_variable) {
gymgg + geom_histogram(aes(x=variable), col='black', fill='maroon') + labs(title=paste('Distribution of', full_variable), x=full_variable, y='Frequency') + theme_bw()
}
func_histogram("Calories_Per_Hour", "Calories Burned Per Hour")
gymgg = ggplot(cleaned_gym)
# calories per hour
# workout type
# session duration
# bmi
func_histogram = function(variable, full_variable) {
variable = as.numeric(gymgg[[variable]])
gymgg + geom_histogram(aes(x=variable), col='black', fill='maroon') + labs(title=paste('Distribution of', full_variable), x=full_variable, y='Frequency') + theme_bw()
}
func_histogram("Calories_Per_Hour", "Calories Burned Per Hour")
die1 = numeric(0)
die2 = numeric(0)
my_sum = numeric(0)
for (i in 1:5000) {
die1[i] = sample(1:6,1)
die2[i] = sample(1:6,1)
my_sum[i] = die1[i] + die2[i]
}
sum(my_sum == 10)/5000
sum(my_sum >= 10)/5000
myrolls = c()
mycoin = c()
for (i in 1:5000) {
myrolls = c(myrolls,sample(1:6,1))
mycoin =  c(mycoin,sample(c("heads","tails"),1))
}
sum(myrolls == 6 & mycoin == "heads")/5000
1/6*1/2
birthdays = sample(c(1:365), 5, replace = TRUE)
table(birthdays)
#search over
people = c(35:52)
prob = c()
for(j in 1:length(people)){
num_people = people[j]
birthday_match=c()
for(i in 1:10000){
birthdays = sample(c(1:365), num_people, replace = TRUE)
my_tab = table(birthdays)
birthday_match[i] = sum(my_tab>=2)
}
prob[j] = sum(birthday_match !=0)/10000
}
for(j in 1:length(people)){
num_people = people[j]
birthday_match=c()
for(i in 1:10000){
birthdays = sample(c(1:365), num_people, replace = TRUE)
my_tab = table(birthdays)
birthday_match[i] = sum(my_tab>=2)
}
prob[j] = sum(birthday_match !=0)/10000
}
tibble(people=people, prob=prob)
library(tidyverse)
tibble(people=people, prob=prob)
my_tab = table(birthdays)
birthdays = sample(c(1:365), num_people, replace = TRUE)
my_tab = table(birthdays)
my_list = [1,2]
my_list = c(1,2)
knitr::opts_chunk$set(fig.height=3, fig.width=4, warning=FALSE, tidy.opts=list(width.cutoff=60))
library(tidyverse)
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(readr)
library(stringr)
library(viridis)
if (1 in my_list){
?if
l
if (1 == my_list){
print("hi")
}
?unique
eggs_bought = c(5:50)
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (unique(current_draw) == 5) {
all_eggs_count[j] = TRUE
}
prob[i] = length(all_eggs_count) / 10000
}
}
eggs_bought = c(5:50)
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (unique(current_draw) >= 5) {
all_eggs_count[j] = TRUE
}
prob[i] = length(all_eggs_count) / 10000
}
}
unique(current_draw)
eggs_bought = c(5:50)
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (length(unique(current_draw)) >= 5) {
all_eggs_count[j] = TRUE
}
prob[i] = length(all_eggs_count) / 10000
}
}
tibble(eggs bought=eggs_bought, prob=prob)
tibble(eggs_bought=eggs_bought, prob=prob)
eggs_bought = 5
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (length(unique(current_draw)) >= 5) {
all_eggs_count[j] = TRUE
}
prob[i] = length(all_eggs_count) / 10000
}
}
tibble(eggs_bought=eggs_bought, prob=prob)
eggs_bought = 5
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (length(unique(current_draw)) >= 5) {
all_eggs_count[j] = TRUE
}
prob[i] = length(all_eggs_count) / 10000
}
}
tibble(eggs_bought=eggs_bought, prob=prob)
eggs_bought = 5
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (length(unique(current_draw)) >= 5) {
all_eggs_count[j] = TRUE
}
prob[i] = length(all_eggs_count) / 10000
}
}
tibble(eggs_bought=eggs_bought, prob=prob)
eggs_bought = 5
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (length(unique(current_draw)) >= 5) {
all_eggs_count[j] = TRUE
}
prob[i] = length(all_eggs_count) / 10000
}
}
tibble(eggs_bought=eggs_bought, prob=prob)
eggs_bought = 5
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (length(unique(current_draw)) >= 5) {
all_eggs_count[j] = TRUE
}
prob[i] = length(all_eggs_count) / 10000
}
}
tibble(eggs_bought=eggs_bought, prob=prob)
eggs_bought = c(5:50)
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (length(unique(current_draw)) >= 5) {
all_eggs_count = all_eggs_count + 1
}
prob[i] = all_eggs_count / 10000
}
}
tibble(eggs_bought=eggs_bought, prob=prob)
eggs_bought = c(5:50)
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (length(unique(current_draw)) >= 5) {
all_eggs_count = all_eggs_count + 1
}
prob[i] = all_eggs_count / 10000
}
}
tibble(eggs_bought=eggs_bought, prob=prob)
eggs_bought = c(5:50)
prob = c()
for (i in 1:length(eggs_bought)){
num_eggs = eggs_bought[i]
all_eggs_count = 0
for (j in 1:10000){
current_draw = sample(c(1:5), num_eggs, replace = TRUE)
if (length(unique(current_draw)) >= 5) {
all_eggs_count = all_eggs_count + 1
}
prob[i] = all_eggs_count / 10000
}
}
tibble(eggs_bought= Eggs Bought, prob= Probability)
tibble(eggs_bought=eggs_bought, prob=prob)
# Formats the table
eggs_tibble = tibble(eggs_bought=eggs_bought, prob=prob)
kable_eggs = kable(eggs_tibble, "html", col.names = c("Eggs Bought", "Probability"), align = "c")
styled_eggs = kable_styling(kable_eggs, full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
styled_eggs = row_spec(styled_eggs, 0, bold = TRUE)
styled_eggs
shiny::runApp('Documents/Fall 2024 Classes/SDS 313/Week 13')
?img
shiny::runApp('Documents/Fall 2024 Classes/SDS 313/Week 13')
train = read.csv("train.csv")
getwd()
setwd("/Users/arnavsmacbook/PycharmProjects/storesales/data")
combined_train = read.csv("combined_train.csv")
View(combined_train)
View(combined_train)
